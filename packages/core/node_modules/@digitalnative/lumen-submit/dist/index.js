"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const keyring_1 = require("@polkadot/keyring");
const lumen_targets_1 = require("@digitalnative/lumen-targets");
const path_1 = require("path");
const submitData = (data, config, api) => __awaiter(void 0, void 0, void 0, function* () {
    // Generate keyring from mnemonics in config file
    // create a keyring with some non-default values specified
    //console.log(data);
    const keyring = new keyring_1.Keyring();
    const pair = keyring.addFromUri(config.mnemonic, { name: "oracle pair" }, "sr25519");
    for (const [key, value] of Object.entries(data)) {
        try {
            yield report(key, value, api, pair, config);
        }
        catch (error) {
            config.events.emit("submit:fail", {
                assetName: key,
                price: value,
                error,
            });
        }
    }
    /*
    // traverse from the data dict and submit each price
    for (const [key, value] of Object.entries(data)) {
      console.log(key)
      const api = await polkadotApi(config);
      await report(key, value, api, pair)
    }
    */
});
exports.default = submitData;
const report = (key, value, api, pair, config) => __awaiter(void 0, void 0, void 0, function* () {
    const unsub = yield api.tx.oracle
        .report(parseInt(config.socket), parseInt(key), parseInt(value))
        .signAndSend(pair, (result) => {
        if (result.isReady) {
            config.events.emit("submit:ready", {
                blockHash: result.status.asInBlock,
                assetName: lumen_targets_1.table[key],
                price: value,
            });
        }
        if (result.status.isInBlock) {
            config.events.emit("submit:inBlock", {
                blockHash: result.status.asInBlock,
                assetName: lumen_targets_1.table[key],
                price: value,
            });
        }
        else if (result.status.isFinalized) {
            config.events.emit("submit:success", {
                blockHash: result.status.asFinalized,
                assetName: lumen_targets_1.table[key],
                price: value,
            });
            unsub();
            path_1.resolve();
        }
    });
    yield timer(6000);
});
const timer = (ms) => new Promise((res) => setTimeout(res, ms));
