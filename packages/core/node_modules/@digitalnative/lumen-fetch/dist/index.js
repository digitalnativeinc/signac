"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mock_1 = __importDefault(require("./mock"));
const lumen_targets_1 = require("@digitalnative/lumen-targets");
const axios_1 = __importDefault(require("axios"));
const decimals_1 = __importDefault(require("./decimals"));
const fetchStockData = (symbol, config) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        config.events.emit("fetch:start", { symbol });
        const { data } = yield axios_1.default.get(`https://finnhub.io/api/v1/quote?symbol=${symbol}&token=${config.finnhub}`);
        const price = data.c;
        // add error for finnhub price data showing 0$ for APHA
        config.events.emit("fetch:succeed", { symbol, price });
        return decimals_1.default(String(price), 8);
    }
    catch (err) {
        console.log(err);
        const why = `failed to fetch stock data on: ${symbol}\nstatus: ${err.response &&
            err.response.status}\nmessage: ${err.response && err.response.message}`;
        config.events.emit("fetch:fail", { why });
    }
});
const fetchNomicsData = (symbol, config) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        config.events.emit("fetch:start", { symbol });
        const { data } = yield axios_1.default.get(`https://api.nomics.com/v1/currencies/ticker?key=${config.nomics}&ids=${symbol}&intervdal=1d,30d&convert=USD&per-page=100&page=1&sort=rank`);
        const price = data[0].price;
        config.events.emit("fetch:succeed", { symbol, price });
        return decimals_1.default(price, 8);
    }
    catch (err) {
        const why = `failed to fetch coin data on :${symbol}\nstatus: ${err.response &&
            err.response.status}\nmessage: ${err.response && err.response.message}`;
        config.events.emit("fetch:fail", { why });
    }
});
const fetchData = (isMock, config) => __awaiter(void 0, void 0, void 0, function* () {
    // Check mock option
    if (isMock) {
        return mock_1.default;
    }
    else {
        // Get assets to fetch prices
        const data = {};
        // traverse from the table dict and get price for each
        for (const [key, value] of Object.entries(lumen_targets_1.table)) {
            const result = yield (() => __awaiter(void 0, void 0, void 0, function* () {
                switch (lumen_targets_1.sources[key]) {
                    // finnhub for stocks
                    case lumen_targets_1.Sources.FINNHUB:
                        return yield fetchStockData(value, config);
                    // nomics for crypto
                    case lumen_targets_1.Sources.NOMICS:
                        return yield fetchNomicsData(value, config);
                    default:
                        return (1e8).toString();
                }
            }))();
            data[key] = result;
        }
        return data;
    }
});
exports.default = fetchData;
