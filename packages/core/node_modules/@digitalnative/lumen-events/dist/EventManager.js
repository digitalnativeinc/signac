"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const SubscriberAggregator_1 = __importDefault(require("./SubscriberAggregator"));
const emittery_1 = __importDefault(require("emittery"));
const defaultSubscribers_1 = __importDefault(require("./defaultSubscribers"));
class EventManager {
    constructor(eventManagerOptions) {
        let { logger, muteLogging, subscribers } = eventManagerOptions;
        this.emitter = new emittery_1.default();
        this.subscriberAggregators = [];
        this.initializationOptions = {
            emitter: this.emitter,
            logger,
            muteLogging,
            subscribers,
        };
        this.initializeDefaultSubscribers(this.initializationOptions);
    }
    emit(event, data) {
        return this.emitter.emit(event, data);
    }
    initializeDefaultSubscribers(initializationOptions) {
        const aggregatorOptions = Object.assign({}, initializationOptions, {
            subscribers: defaultSubscribers_1.default,
        });
        this.subscriberAggregators.push(new SubscriberAggregator_1.default(aggregatorOptions));
    }
    initializeUserSubscribers(initializationOptions) {
        const { subscribers } = initializationOptions;
        if (subscribers && Object.keys(subscribers).length > 0) {
            const aggregatorOptions = Object.assign({}, initializationOptions, {
                emitter: this.emitter,
            });
            this.subscriberAggregators.push(new SubscriberAggregator_1.default(aggregatorOptions));
        }
    }
    updateSubscriberOptions(newOptions) {
        this.subscriberAggregators.forEach((aggregator) => {
            aggregator.updateSubscriberOptions(newOptions);
        });
    }
}
exports.default = EventManager;
