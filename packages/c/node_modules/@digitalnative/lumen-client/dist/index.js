"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lumen_config_1 = __importDefault(require("@digitalnative/lumen-config"));
const lumen_fetch_1 = __importDefault(require("@digitalnative/lumen-fetch"));
const lumen_submit_1 = __importDefault(require("@digitalnative/lumen-submit"));
const api_1 = require("@polkadot/api");
const runClient = (dir) => __awaiter(void 0, void 0, void 0, function* () {
    const config = lumen_config_1.default.default({ dir });
    const { events } = config;
    events.emit("client:start");
    const api = yield polkadotApi(config);
    // register setTimeout to execute in every minute
    yield loop(api, config);
    events.emit("client:init");
});
function loop(api, config) {
    return __awaiter(this, void 0, void 0, function* () {
        setTimeout(function () {
            return __awaiter(this, void 0, void 0, function* () {
                config.events.emit("client:next");
                // fetch data
                const data = yield lumen_fetch_1.default(false, config);
                yield lumen_submit_1.default(data, config, api);
                loop(api, config);
            });
        }, 10);
    });
}
exports.default = runClient;
function polkadotApi(config) {
    return __awaiter(this, void 0, void 0, function* () {
        const provider = new api_1.WsProvider(config.rpc);
        const definitions = require("@digitalnative/type-definitions/opportunity");
        let types = definitions.types[0].types;
        const api = yield new api_1.ApiPromise({
            provider,
            types,
        });
        yield api.isReady;
        return api;
    });
}
