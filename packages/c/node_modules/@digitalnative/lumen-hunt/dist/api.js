"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.polkadotApi = exports.ethersApi = void 0;
const ethers_1 = require("ethers");
const api_1 = require("@polkadot/api");
function ethersApi(ethProvider, privateKey) {
    return __awaiter(this, void 0, void 0, function* () {
        let provider = new ethers_1.ethers.providers.JsonRpcProvider(ethProvider);
        let walletWithProvider = new ethers_1.Wallet(privateKey, provider);
        return walletWithProvider;
    });
}
exports.ethersApi = ethersApi;
function polkadotApi(config) {
    return __awaiter(this, void 0, void 0, function* () {
        const provider = new api_1.WsProvider(config.rpc);
        const definitions = require("@digitalnative/type-definitions/opportunity");
        let types = definitions.types[0].types;
        const api = yield new api_1.ApiPromise({
            provider,
            types,
        });
        yield api.isReady;
        return api;
    });
}
exports.polkadotApi = polkadotApi;
